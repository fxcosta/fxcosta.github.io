{"version":3,"sources":["webpack:///path---blog-switching-out-callbacks-with-promises-in-mongoose-74010ee3f7a828d0e7a6.js","webpack:///./.cache/json/blog-switching-out-callbacks-with-promises-in-mongoose.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/blog-switching-out-callbacks-with-promises-in-mongoose.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","tags","pathContext","slug","collection"],"mappings":"AAAAA,cAAc,KAERC,gHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,cACAC,MAAA,qCACAC,OAAA,gBAGAC,gBACAC,GAAA,+FACAC,KAAA,w6SACAC,aACAC,KAAA,aACAN,MAAA,oDACAO,MACA,QACA,OACA,WACA,eAKAC,aACAC,KAAA,2DACAC,WAAA","file":"path---blog-switching-out-callbacks-with-promises-in-mongoose-74010ee3f7a828d0e7a6.js","sourcesContent":["webpackJsonp([25],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/blog-switching-out-callbacks-with-promises-in-mongoose.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"site\": {\n\t\t\t\t\"siteMetadata\": {\n\t\t\t\t\t\"title\": \"Felix Costa | Full-stack Developer\",\n\t\t\t\t\t\"author\": \"Felix Costa\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"id\": \"/var/www/fxcosta-gatsby-v3/src/posts/mongoose-promises.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"html\": \"<p>Working with promises and mongoose just became a whole lot easier with the <a href=\\\"https://github.com/Automattic/mongoose/blob/master/History.md#410--2015-07-24\\\">4.1 release</a>, which added the ability to specify alternative promise libraries. Prior to that, promise support was limited to the <a href=\\\"https://github.com/aheckmann/mpromise\\\">mpromise</a> way of using promises. For some folks, including myself, this meant there wasn’t a friendly <code>.catch</code> method available to the promise chain. In this post, I’ll quickly cover how to switch over to other supported promise libraries and show how using promises can clean up your mongoose callbacks.</p>\\n<p>Normally, when using mongoose, you just need to require it. In order to switch out the promise provider, you’ll also need to require the promise library and point <code>mongoose.Promise</code> to it. In the following example, I set the promise library to bluebird:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> mongoose <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongoose'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// set Promise provider to bluebird</span>\\nmongoose<span class=\\\"token punctuation\\\">.</span>Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bluebird'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Here’s the example for using native promises or <code>q</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// q</span>\\nmongoose<span class=\\\"token punctuation\\\">.</span>Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'q'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>Promise<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// native promises</span>\\nmongoose<span class=\\\"token punctuation\\\">.</span>Promise <span class=\\\"token operator\\\">=</span> global<span class=\\\"token punctuation\\\">.</span>Promise<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>That’s as simple and non-hacky as one could hope for. Next up, I’ll show what typical mongoose callbacks look like and how you can swap those out for promises. In these last examples, I’ll look up a user by id, update the user’s name, and save it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// error first callback style</span>\\nUser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'123'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error:'</span><span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  user<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Robert Paulson'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  user<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// yet another err object to deal with</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error:'</span><span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'updated user: '</span> <span class=\\\"token operator\\\">+</span> user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with updated user</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The above callback example shows the first level of nesting and multiple error handlers. That’s not too bad, but with more logic it can easily become visually overwhelming. In the last example, I’ll show what the same task looks like using promises. We’ll switch to using Model queries that return a promise via the <code>.exec()</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> User<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'123'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\npromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  user<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Robert Paulson'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> user<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns a promise</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'updated user: '</span> <span class=\\\"token operator\\\">+</span> user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with updated user</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// just need one of these</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error:'</span><span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Note that there was only one error handler for both of the promises, <code>findById(id).exec()</code> and <code>user.save()</code>. For me, the benefit of using promises is really in the ability to read what’s going on in the code and to consolidate error handling into one place with the option to break that out if needed. If that interests you, give promises in mongoose a try.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"date\": \"2015-07-28\",\n\t\t\t\t\t\"title\": \"Switching out callbacks with promises in Mongoose\",\n\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\"mongo\",\n\t\t\t\t\t\t\"node\",\n\t\t\t\t\t\t\"mongoose\",\n\t\t\t\t\t\t\"promises\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/blog/switching-out-callbacks-with-promises-in-mongoose/\",\n\t\t\t\"collection\": \"posts\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-switching-out-callbacks-with-promises-in-mongoose-74010ee3f7a828d0e7a6.js","module.exports = {\n\t\"data\": {\n\t\t\"site\": {\n\t\t\t\"siteMetadata\": {\n\t\t\t\t\"title\": \"Felix Costa | Full-stack Developer\",\n\t\t\t\t\"author\": \"Felix Costa\"\n\t\t\t}\n\t\t},\n\t\t\"markdownRemark\": {\n\t\t\t\"id\": \"/var/www/fxcosta-gatsby-v3/src/posts/mongoose-promises.md absPath of file >>> MarkdownRemark\",\n\t\t\t\"html\": \"<p>Working with promises and mongoose just became a whole lot easier with the <a href=\\\"https://github.com/Automattic/mongoose/blob/master/History.md#410--2015-07-24\\\">4.1 release</a>, which added the ability to specify alternative promise libraries. Prior to that, promise support was limited to the <a href=\\\"https://github.com/aheckmann/mpromise\\\">mpromise</a> way of using promises. For some folks, including myself, this meant there wasn’t a friendly <code>.catch</code> method available to the promise chain. In this post, I’ll quickly cover how to switch over to other supported promise libraries and show how using promises can clean up your mongoose callbacks.</p>\\n<p>Normally, when using mongoose, you just need to require it. In order to switch out the promise provider, you’ll also need to require the promise library and point <code>mongoose.Promise</code> to it. In the following example, I set the promise library to bluebird:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> mongoose <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongoose'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// set Promise provider to bluebird</span>\\nmongoose<span class=\\\"token punctuation\\\">.</span>Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bluebird'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Here’s the example for using native promises or <code>q</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// q</span>\\nmongoose<span class=\\\"token punctuation\\\">.</span>Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'q'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>Promise<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// native promises</span>\\nmongoose<span class=\\\"token punctuation\\\">.</span>Promise <span class=\\\"token operator\\\">=</span> global<span class=\\\"token punctuation\\\">.</span>Promise<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>That’s as simple and non-hacky as one could hope for. Next up, I’ll show what typical mongoose callbacks look like and how you can swap those out for promises. In these last examples, I’ll look up a user by id, update the user’s name, and save it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// error first callback style</span>\\nUser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'123'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error:'</span><span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  user<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Robert Paulson'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  user<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// yet another err object to deal with</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error:'</span><span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'updated user: '</span> <span class=\\\"token operator\\\">+</span> user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with updated user</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The above callback example shows the first level of nesting and multiple error handlers. That’s not too bad, but with more logic it can easily become visually overwhelming. In the last example, I’ll show what the same task looks like using promises. We’ll switch to using Model queries that return a promise via the <code>.exec()</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> User<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'123'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\npromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  user<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Robert Paulson'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> user<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns a promise</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'updated user: '</span> <span class=\\\"token operator\\\">+</span> user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with updated user</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// just need one of these</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error:'</span><span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Note that there was only one error handler for both of the promises, <code>findById(id).exec()</code> and <code>user.save()</code>. For me, the benefit of using promises is really in the ability to read what’s going on in the code and to consolidate error handling into one place with the option to break that out if needed. If that interests you, give promises in mongoose a try.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"date\": \"2015-07-28\",\n\t\t\t\t\"title\": \"Switching out callbacks with promises in Mongoose\",\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"mongo\",\n\t\t\t\t\t\"node\",\n\t\t\t\t\t\"mongoose\",\n\t\t\t\t\t\"promises\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/blog/switching-out-callbacks-with-promises-in-mongoose/\",\n\t\t\"collection\": \"posts\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-switching-out-callbacks-with-promises-in-mongoose.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/blog-switching-out-callbacks-with-promises-in-mongoose.json\n// module chunks = 25"],"sourceRoot":""}